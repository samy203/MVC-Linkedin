@model FeedsViewModel

<div class="feeds-container" id="postz">
    <div class="wannabe-post">
        <div class="post-area">
            @{
                using (Html.BeginForm("AddPost", "Feed", new { id = "postForm" }))
                {
                    Model.PostContent = null;
                    @Html.HiddenFor(m => m.ID)
                    @Html.TextAreaFor(m => m.PostContent, new { name = "Search", @class = "form-control post-text", cols = "30", rows = "10", placeholder = "Write a Post" })
                    <input type="submit" class="form-control post-submit" value="Post">
                }
            }
        </div>
    </div>

    <div class="seperator"></div>

    <!--For each post in server.-->

    @{
        foreach (var post in Model.Posts)
        {
            Model.CurrentPost = post;

            <div class="posts">



                <div class="poster-data">

                    @{
                        if (post.ApplicationUser.Image == null)
                        {
                            <img class="poster-img" src="~/Resource/propic.png" alt="" width="50px" height="50px">
                        }
                        else
                        {
                            <img class="poster-img" src="@post.ApplicationUser.Image.Path" alt="" width="50px" height="50px">
                        }
                    }


                    <div class="poster-name">
                        @{
                            string s = post.ApplicationUser.FirstName + " " + post.ApplicationUser.LastName;
                        }
                        <div>@Html.ActionLink(s, "DisplayUser", "Person", new { RequiredUserID = post.ApplicationUser.Id, ID = Model.ID }, new { style = "color:Black" })</div>
                        <div style="font-size: 12px">
                            @{
                                if (Math.Abs((post.Date - DateTime.Now).Value.TotalMilliseconds) < 1000)
                                {
                                    <span>now</span>
                                }
                                else if (Math.Abs((post.Date - DateTime.Now).Value.TotalSeconds) < 60)
                                {
                                    @(Math.Abs((post.Date - DateTime.Now).Value.Seconds)) <span>seconds ago</span>
                                }
                                else if (Math.Abs((post.Date - DateTime.Now).Value.TotalMinutes) < 60)
                                {
                                    @(Math.Abs((post.Date - DateTime.Now).Value.Minutes)) <span>mins ago</span>
                                }
                                else if (Math.Abs((post.Date - DateTime.Now).Value.TotalHours) < 24)
                                {
                                    @(Math.Abs((post.Date - DateTime.Now).Value.Hours)) <span>hours ago</span>
                                }
                                else if (Math.Abs((post.Date - DateTime.Now).Value.TotalDays) < 365)
                                {
                                    @(Math.Abs((post.Date - DateTime.Now).Value.Days)) <span>days ago</span>
                                }
                                else
                                {
                                    @((int)(Math.Abs((post.Date - DateTime.Now).Value.Days) / 365)) <span>years ago</span>
                                }
                            }

                        </div>
                    </div>
                </div>




                <div class="post-content">
                    @post.Content
                </div>
                @Html.Partial("_PartialComments", Model)
            </div>
        }
    }




</div>
